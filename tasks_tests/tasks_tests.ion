import platform.tasks {...}
import libc {...}

func dummy_task_fn(data : void*)
{
  #assert(false); // don't call me
}

func test_unstarted()
{
  unstarted : UnstartedTasks;

  id := unstarted_create(&unstarted, {data=(:void*)1, fn=dummy_task_fn});
  #assert(id.value == pack_id(1, 1).value);
  original := unstarted_discard(&unstarted, id);
  #assert(original.data == (:void*)1);
  #assert(intptr(original.fn) == intptr(dummy_task_fn)); // @todo report ion defect, casts should not be needed
  id = unstarted_create(&unstarted, {data=(:void*)2, fn=dummy_task_fn});
  #assert(id.value == pack_id(1, 2).value);
  a := id;

  id = unstarted_create(&unstarted, {data=(:void*)3, fn=dummy_task_fn});
  #assert(id.value == pack_id(2, 1).value);

  #assert(unstarted.buf[1].task_being_blocked.value == 0);
  unstarted_depends_on(&unstarted, id, a);
  unstarted_depends_on(&unstarted, id, a);
  #assert(Task_compare(unstarted.buf[1].task_being_blocked, id) == 0);
}

func main(argc : int, argv: char**) : int {
  num_cpus := _get_num_logical_cpus();
  printf("num_logical_cpus\t%d\n", num_cpus);
  test_unstarted();
  return 0;
}