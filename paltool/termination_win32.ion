struct TerminationTask
{
    task: Task;
    done: win32.CONDITION_VARIABLE;
}

func termination_task_create(task: TerminationTask*)
{
    *task = {};
    task.task = create_task(_termination_task, &task.done);
}

func termination_task_wait_for(task: TerminationTask*)
{
  // @todo maybe there should be a way to wait for pending tasks (switch to worker_thread w/ same cpu affinity from within the main thread)
  // busy loop for remaining tasks
  // @todo platform
  done_lock: win32.SRWLOCK;
  win32.AcquireSRWLockExclusive(&done_lock);
  win32.SleepConditionVariableSRW(
    &task.done,
    &done_lock,
    win32.INFINITE,
    /* Flags */ 0
  );
}

// @type_erasure: data: CONDITION_VARIABLE*
func _termination_task(data: void*)
{
  dest : win32.CONDITION_VARIABLE* = data;
  win32.WakeAllConditionVariable(dest);
}
