import datum {...}
import containers {...}
import libc

var unstarted_tasks : UnstartedTasks;

func registry_init()
{
}

func registry_deinit()
{
  buf_free(unstarted_tasks.buf);
  unstarted_tasks = {};
}

struct TaskContent
{
  data : void*;
  fn : TaskFunc;
}

struct UnstartedTask
{
  id : Task;
  content : TaskContent;
  task_being_blocked : Task;
}

struct UnstartedTasks
{
  cap : usize;
  buf : UnstartedTask*;
}

struct ThreadWorkQueue
{
  blocked_tasks : TaskBlocker*;
  pending_tasks : PendingTasks;
}

struct TaskBlocker
{
  task : Task; // task being blocked
  blockers_exist_in_thread : uint64; // bitmap of threads with existing blocker task. 0 means no blockers exist
}

struct PendingTasks
{
    len : usize;
    cap : usize;
    tasks : Task*;
    blocks : Task*; // task that is released when ours is done
    contents : TaskContent*;
    executing : bool*;
    data: void**;
}

func Task_compare(a : Task const, b : Task const) : int
{
  return a.value<b.value? -1 : (b.value<a.value? +1 : 0);
}

func unpack_generation_from_id(id : Task) : int
{
  return bits(id.value, 0, 4);
}

func unpack_idx_from_id(id : Task) : uint64
{
  return bits(id.value, 4, 60);
}

func pack_id(idx : usize, generation : int) : Task
{
  return { value = bits(idx, 0, 60)<<4 | bits(generation, 0, 4) };
}

func unstarted_create(self : UnstartedTasks*, content : TaskContent) : Task
{
  // allocate null task
  buf_alloc_at(&self.buf, sizeof(self.buf[0]), 0);

  n := buf_len(self.buf);
  idx := n;
  for (i:=1; i<n; i++) {
    if (!self.buf[i].content.fn) {
      idx = i;
      break;
    }
  }
  if (idx == n) {
    buf_alloc_at(&self.buf, sizeof(self.buf[0]), idx);
    self.cap = buf_len(self.buf);
  }
  #assert(idx < buf_len(self.buf));
  unstarted_task := &self.buf[idx];
  *unstarted_task = {
    id = pack_id(idx, unpack_generation_from_id(unstarted_task.id)+1),
    content = content,
  };
  return unstarted_task.id;
}

func unstarted_blocker_exists_for(self: UnstartedTasks*, task: Task) : bool
{
  check_valid_id(self, task);
  for (ut := &self.buf[0]; ut < &self.buf[buf_len(self.buf)]; ut++) {
    if (!ut.content.fn) { continue; }
    if (Task_compare(ut.task_being_blocked, task) == 0) { return true; }
  }
  return false;
}


func check_valid_id(self : UnstartedTasks*, id : Task)
{
  idx := unpack_idx_from_id(id);
  #assert(idx < buf_len(self.buf));
  #assert(id.value == self.buf[idx].id.value);
}

func unstarted_discard(self : UnstartedTasks*, id : Task) : TaskContent
{
  check_valid_id(self, id);
  unstarted := &self.buf[unpack_idx_from_id(id)];
  content := unstarted.content;
  unstarted.content.fn = NULL; // mark as discarded
  return content;
}

func unstarted_depends_on(self : UnstartedTasks*, id : Task, predecessor_id : Task)
{
  check_valid_id(self, id);
  check_valid_id(self, predecessor_id);
  self.buf[unpack_idx_from_id(predecessor_id)].task_being_blocked = id;
}

func pending_tasks_add(dest : PendingTasks*, task : Task, blocked_task : Task, content : TaskContent, opaque_data: void*)
{
  *(:Task*)buf_alloc_at(&dest.tasks, sizeof(dest.tasks[0]), dest.len) = task;
  *(:Task*)buf_alloc_at(&dest.blocks, sizeof(dest.blocks[0]), dest.len) = blocked_task;
  *(:TaskContent*)buf_alloc_at(&dest.contents, sizeof(dest.contents[0]), dest.len) = content;
  *(:bool*)buf_alloc_at(&dest.executing, sizeof(dest.executing[0]), dest.len) = false;
  *(:void**)buf_alloc_at(&dest.data, sizeof(dest.data[0]), dest.len) = opaque_data;
  dest.len++;
  #assert(dest.len == buf_len(dest.tasks));
  #assert(dest.len == buf_len(dest.blocks));
  #assert(dest.len == buf_len(dest.contents));
  #assert(dest.len == buf_len(dest.executing));
  #assert(dest.len == buf_len(dest.data));
  dest.cap = dest.len;
}

// valid range: [first,num_elems)
// post: [first,num_elems-1) <- [first+1,num_elems-1) 
func elemshift_left(first : void*, elem_size : usize, num_elems : usize)
{
  libc.memmove(first, (:uint8*)first+elem_size, elem_size * (num_elems - 1));
}

// valid range: [first,num_elems)
// post: [first+1,num_elems-1) <- [first,num_elems-1) 
func elemshift_right(first : void*, elem_size : usize, num_elems : usize)
{
  libc.memmove((:uint8*)first+elem_size, (:uint8*)first, elem_size * (num_elems - 1));
}


func pending_tasks_remove(dest : PendingTasks*, idx : usize)
{
  #assert(idx < dest.len);
  elemshift_left(&dest.tasks[idx], sizeof(dest.tasks[0]), dest.len - idx);
  elemshift_left(&dest.blocks[idx], sizeof(dest.blocks[0]), dest.len - idx);
  elemshift_left(&dest.contents[idx], sizeof(dest.contents[0]), dest.len - idx);
  elemshift_left(&dest.executing[idx], sizeof(dest.executing[0]), dest.len - idx);
  elemshift_left(&dest.data[idx], sizeof(dest.data[0]), dest.len - idx);
  dest.len--;
  containers.buf_hdr_mutable(dest.tasks).size -= sizeof(dest.tasks[0]);
  containers.buf_hdr_mutable(dest.blocks).size -= sizeof(dest.blocks[0]);
  containers.buf_hdr_mutable(dest.contents).size -= sizeof(dest.contents[0]);
  containers.buf_hdr_mutable(dest.executing).size -= sizeof(dest.executing[0]);
  containers.buf_hdr_mutable(dest.data).size -= sizeof(dest.data[0]);
}

struct CountedRange
{
  pos: usize;
  n: usize;
}

func blocked_tasks_bsearch_n(blocked_tasks: TaskBlocker const *, num_blocked_tasks: usize, task : Task const) : CountedRange
{
  first := 0;
  n := num_blocked_tasks;
  while(n > 0) {
    halfwidth := n/2;
    midpoint := first + halfwidth;
    cmp := Task_compare(blocked_tasks[midpoint].task, task);
    if (cmp < 0) {
      first = midpoint + 1;
      n = n - (halfwidth + 1);
    } else if (cmp > 0) {
      n = halfwidth;
    } else {
      left := blocked_tasks_bsearch_lower_bound_n(&blocked_tasks[first], halfwidth, task);
      right := blocked_tasks_bsearch_upper_bound_n(&blocked_tasks[midpoint + 1], n - midpoint - 1, task);
      return { first + left, midpoint + 1 + right - (first + left) };
    }
  }
  return { first, 0 };
}

func blocked_tasks_bsearch_lower_bound_n(blocked_tasks: TaskBlocker const *, num_blocked_tasks: usize, task : Task const) : usize
{
  n := num_blocked_tasks;
  first := 0;
  while (n > 0) {
    halfwidth := n/2;
    midpoint := first + halfwidth;
    cmp := Task_compare(blocked_tasks[midpoint].task, task);
    if (cmp < 0) {
      first = midpoint + 1;
      n = n - (halfwidth + 1);
    } else {
      n = halfwidth;
    }
  }
  return first;
}

func blocked_tasks_bsearch_upper_bound_n(blocked_tasks: TaskBlocker const *, num_blocked_tasks: usize, task : Task const) : usize
{
  n := num_blocked_tasks;
  first := 0;
  while (n > 0) {
    halfwidth := n/2;
    midpoint := first + halfwidth;
    cmp := Task_compare(blocked_tasks[midpoint].task, task);
    if (cmp > 0) {
      n = halfwidth;
    } else {
      first = midpoint + 1;
      n = n - (halfwidth + 1);
    }
  }
  return first;
}

func blocked_tasks_put(blocked_tasks_ptr : TaskBlocker**, task : Task, has_blockers_bitmask : uint64)
{
  range := blocked_tasks_bsearch_n(*blocked_tasks_ptr, buf_len(*blocked_tasks_ptr), task);
  blocker : TaskBlocker*;
  if (range.n == 0) {
    // find free spot
    free_spot := range.pos;
    while (free_spot > 0 && !(*blocked_tasks_ptr)[free_spot - 1].blockers_exist_in_thread) {
      free_spot--;
    }
    if (free_spot < range.pos) {
      blocker = &(*blocked_tasks_ptr)[free_spot];
    } else {
      // add one
      buf_alloc_at(blocked_tasks_ptr, sizeof(*blocked_tasks_ptr[0]), buf_len(*blocked_tasks_ptr));
      blocked := *blocked_tasks_ptr;
      n := buf_len(blocked);
      elemshift_right(&blocked[range.pos], sizeof(*blocked), n - range.pos);
      blocker = &blocked[range.pos];
    }
  } else {
    #assert(range.n == 1);
    blocker = &(*blocked_tasks_ptr)[range.pos];
  }
  blocker.task = task;
  blocker.blockers_exist_in_thread |= has_blockers_bitmask;
}

func blocked_tasks_update(dest : ThreadWorkQueue*, has_blockers_bitmask : uint64, num_tasks : usize, blocked_tasks : Task*)
{
  // reset all
  {
    n:=buf_len(dest.blocked_tasks);
    for (i:=0; i<n; i++) {
      dest.blocked_tasks[i].blockers_exist_in_thread &= ~has_blockers_bitmask;
    }
  }
  for (i:=0; i<dest.pending_tasks.len; i++) {
    task := dest.pending_tasks.tasks[i];
    is_blocked_by_task : bool;
    for (j:=0; j<num_tasks; j++) {
      if (Task_compare(blocked_tasks[j], task) != 0) { continue; }
      is_blocked_by_task = true;
      break;
    }
    if (!is_blocked_by_task) { continue; }
    blocked_tasks_put(&dest.blocked_tasks, task, has_blockers_bitmask);
  }
}

func thread_work_queue_find_index_first_ready(self: ThreadWorkQueue const*, first_idx: int) : int
{
  for (i:= first_idx; i <self.pending_tasks.len; i++) {
    task := self.pending_tasks.tasks[i];
    if (self.pending_tasks.executing[i]) { continue; }
    ready := true;
    task_in_blocked := blocked_tasks_bsearch_n(&self.blocked_tasks[0], buf_len(self.blocked_tasks), task);
    if (task_in_blocked.n > 0) {
      #assert(task_in_blocked.n == 1);
      ready = !self.blocked_tasks[task_in_blocked.pos].blockers_exist_in_thread;
    }
    if (!ready) { continue; }
    return i;
  }
  return self.pending_tasks.len;
}
