import platform.win32
import libc
import std

struct PlatformPathListGenerator
{
  query: win32.HANDLE;
  root: char*;
  arena: std.ArenaAllocator;
}

func platform_find_all_files(root: char const*): PathListGenerator {
	result := PathListGenerator { error = Error_InvalidRoot };
	query: wchar[];
  {
    a_cat_wchars_from_zstr_utf8(&query, root);
    suffix := "\\*";
    if (query[std.alen(query) - 1] == '\\') {
      a_cat_wchars_from_zstr_ascii(&query, &suffix[1]);
    } else {
      a_cat_wchars_from_zstr_ascii(&query, &suffix[0]);
    }
    std.apush(query, 0);
  }

  // Open query and get info about first file:
  one_file: win32.WIN32_FIND_DATAW;
	qres := 
    win32.FindFirstFileExW(
      query, win32.FindExInfoStandard, &one_file, win32.FindExSearchNameMatch,
      NULL, win32.FIND_FIRST_EX_LARGE_FETCH);

  if (qres != win32.INVALID_HANDLE_VALUE) {
    result.error = Error_None;
    result.output.root = std.sdup(root);
    result.resources = new PlatformPathListGenerator {
      query = qres,
      arena = std.arena_allocator(NULL),
    };
    fill_path_list_from_win32_find_data(
      &result.output, one_file, &result.resources.arena);
  }
  std.afree(query);
	return result;
}

func platform_next_paths(g: PathListGenerator*) {
  one_file: win32.WIN32_FIND_DATAW;
  if (!win32.FindNextFileW(g.resources.query, &one_file)) {
    g.error = Error_PastTheEnd;
    return;
  }
  std.arena_free(&g.resources.arena);
  g.resources.arena = std.arena_allocator(NULL);
  g.output.root = g.resources.root;
  fill_path_list_from_win32_find_data(&g.output, one_file, &g.resources.arena);
}

func platform_free_generator(g: PathListGenerator*) {
  if (!g.resources) { return; }
  std.afree(g.resources.root);
  std.arena_free(&g.resources.arena);
  libc.free(g.resources);
  g.resources = NULL;
}

func fill_path_list_from_win32_find_data(
  dst: PathList*, file: win32.WIN32_FIND_DATAW, allocator: std.Allocator*) {
	if (file.dwFileAttributes & win32.FILE_ATTRIBUTE_DIRECTORY) {
    *dst = {
      root = dst.root,
      num_dirpaths = 1,
      dirpaths = std.anew(allocator),
    };
    std.apush(dst.dirpaths, zutf8_from_zwchar_arena(file.cFileName, allocator));
  } else {
    *dst = {
      root = dst.root,
      num_filepaths = 1,
      filepaths = std.anew(allocator),
    };
    std.apush(dst.filepaths, zutf8_from_zwchar_arena(file.cFileName, allocator));
  }
}

func zutf8_from_zwchar_arena(zwstring: wchar*, allocator: Allocator*): char* {
	output: char* = std.anew(allocator);

	num_needed := win32.WideCharToMultiByte(win32.CP_UTF8, 0, zwstring, -1, NULL, 0, NULL, NULL);
  std.afit(output, num_needed);
  len := win32.WideCharToMultiByte(win32.CP_UTF8, 0, zwstring, -1, output, num_needed, NULL, NULL);
  if (len > 1) {
    std.asetlen(output, len - 1);
  }
  return output;
}

func a_cat_wchars_from_zstr_utf8(ap: wchar**, str: char const*) {
    num_needed := win32.MultiByteToWideChar(win32.CP_UTF8, 0, str, -1, NULL, 0);
    std.afit(*ap, num_needed);
	  len := win32.MultiByteToWideChar(win32.CP_UTF8, 0, str, -1, &(*ap)[std.alen(*ap)], std.acap(*ap)-std.alen(*ap));
    if (len > 1) {
      std.asetlen(*ap, len - 1);
    }
}

func a_cat_wchars_from_zstr_ascii(buf: wchar**, ascii: char const*) {
  while (*ascii) {
    std.apush(*buf, *ascii);
    ++ascii;
  }
}

