import platform.bsd
import libc
import std

struct PlatformPathListGenerator
{
  fd: int;
  batch_mem: uint32[16*1024];
}

struct QueryResult
{
  size: uint32;
  attributes: bsd.AttributeSet;
  error: uint32;
  nameinfo: bsd.Attrreference;
  objtype: bsd.FSObjType;
  objtag: bsd.FSObjTag;
  union {
    struct {
      file_totalsize: bsd.Off;
      file_ioblocksize: uint32;
    }
  }
  name: char*;        // derived
}

func platform_find_all_files(root: char const*): PathListGenerator {
  fd_or_error := bsd.open(root, bsd.O_RDONLY, 0);
  if (fd_or_error < 0) { return { error = Error_InvalidRoot }; }
  #assert(fd_or_error >= 0);
  return {
    resources = new PlatformPathListGenerator { fd = fd_or_error, },
    output = { root = std.sdup(root) },
  };
}

func platform_next_paths(g: PathListGenerator*) {
  #assert(g.error == Error_None);
  query := make_attrlist_for_QueryResult();
  options := uint64(bsd.FSOPT_NOFOLLOW | bsd.FSOPT_REPORT_FULLSIZE | bsd.FSOPT_PACK_INVAL_ATTRS);
  num_entries_or_error :=
    bsd.getattrlistbulk(g.resources.fd, &query, &g.resources.batch_mem[0],
    sizeof(g.resources.batch_mem), options);
  if (num_entries_or_error < 0) {
    #assert(bsd.errno != bsd.EFAULT);
    #assert(bsd.errno != bsd.ERANGE);
    #assert(bsd.errno != bsd.EINVAL);
    g.error = (bsd.errno == bsd.EBADF || bsd.errno == bsd.ENOTDIR)
      ? Error_InvalidRoot
      : Error_FileSystemError;
    return;
  }

  #assert(num_entries_or_error >= 0);
  num_entries := num_entries_or_error;
  if (num_entries == 0) {
    g.error = Error_PastTheEnd;
    return;
  }

  if (g.output.filepaths) { std.asetlen(g.output.filepaths, 0); }
  if (g.output.dirpaths) { std.asetlen(g.output.dirpaths, 0); }
  
  p := (:uint8*)&g.resources.batch_mem[0];
  lp := p + sizeof(g.resources.batch_mem);
  for (i := 0; i < num_entries && p < lp; i++) {
    entry := unpack_query_result(p, lp - p);
    if (entry.objtype == bsd.VREG) {
       std.apush(g.output.filepaths, entry.name);
    } else {
       std.apush(g.output.dirpaths, entry.name);
    }
    p += entry.size;
  }
  g.output.num_filepaths = std.alen(g.output.filepaths);
  g.output.num_dirpaths = std.alen(g.output.dirpaths);
}

func platform_free_generator(g: PathListGenerator*) {
  std.afree(g.output.root);
  std.afree(g.output.filepaths);
  std.afree(g.output.dirpaths);
  if (g.resources) {
    bsd.close(g.resources.fd);
    std.free(g.resources);
    g.resources = NULL;
  }
}

func unpack_query_result(bytes: uint8 const*, num_bytes: usize): QueryResult {
  nameinfo := *((:bsd.Attrreference*)&bytes[28]);
  return {
    size = *((:uint32*)&bytes[0]),
    attributes = *((:bsd.AttributeSet*)&bytes[4]),
    error = *((:uint32*)&bytes[24]),
    nameinfo = *((:bsd.Attrreference*)&bytes[28]),
    objtype = *((:bsd.FSObjType*)&bytes[36]),
    objtag = *((:bsd.FSObjType*)&bytes[40]),
    file_totalsize = *((:bsd.Off*)&bytes[44]),
    file_ioblocksize = *((:uint32*)&bytes[52]),
    name = (:char*)&bytes[28 + nameinfo.attr_dataoffset],
  };
}
  
func make_attrlist_for_QueryResult(): bsd.AttrList {
  return bsd.make_attrlist({
      commonattr = bsd.ATTR_CMN_RETURNED_ATTRS | bsd.ATTR_CMN_ERROR | 
        bsd.ATTR_CMN_NAME | bsd.ATTR_CMN_OBJTYPE | bsd.ATTR_CMN_OBJTAG,
      fileattr = bsd.ATTR_FILE_TOTALSIZE | bsd.ATTR_FILE_IOBLOCKSIZE,
  });
}

