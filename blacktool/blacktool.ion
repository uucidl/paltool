import codecs
import libc
import paltool
import std

func main(): int {
    width := 1680;
    height := 1050;
    pixels: uint32[];
    std.afit(pixels, width * height); // intentional @leak, we let the os free the mem.
    std.asetlen(pixels, width * height);

    I: float[];
    P: float[];
    T: float[];
    for (y := 0; y < height; y++) {
        for (x := 0; x < width; x++) {
            c := black(1.0 * x / width);
            pixels[y * width + x] = c;
            if (y == 0) {
                srgb: float[3] = { (c>>16)&0xff, (c>>8)&0xff, c&0xff };
                for (i:=0; i<3; i++) { srgb[i] *= 1.0/255.0; }
                ipt: float[3];
                paltool.ipt_from_srgb(1, ipt, 3, srgb, 3);
                std.apush(I, ipt[0]);
                std.apush(P, ipt[1]); // P and T are both close to zero if we're fully desaturated
                std.apush(T, ipt[2]);
            }
        }
    }

    print_float_array("i=.", I);
    print_float_array("p=.", P);
    print_float_array("t=.", T);

    codecs.image_save_png({ 4, (:uint8*)&pixels[0], width, height }, "blacks.png");
    return 0;
}

func black(x: float): uint32 {
    #assert(x >= 0.0 && x <= 1.0);
    y: uint8 = uint8(255 * x) & 0xff;
    return 0xff000000 | (y<<16) | (y<<8) | (y);
}

func print_float_array(prefix: char const*, a: float[]) {
    libc.printf("%s", prefix);
    for (i:=0; i<std.alen(a); i++) { libc.printf("%f ", a[i]); }
    libc.printf("\n");
}
