// Creates a linear grey palette while reducing banding, by ensuring
// we search for the srgb triple closest in (IPT) intensity with the
// desired grey.

import codecs
import libc
import paltool
import std { File }

func main(): int {
    num_entries := 1680;
    palette: uint32[];
    std.afit(palette, num_entries); // intentional @leak, we let the os free the mem
    std.asetlen(palette, num_entries);
    make_black_and_white_palette(std.alen(palette), palette);

    // Make an image out of it
    width := std.alen(palette);
    height := 1050;
    pixels: uint32[];
    std.afit(pixels, width * height); // intentional @leak, we let the os free the mem.
    std.asetlen(pixels, width * height);

    for (y := 0; y < height; y++) {
        for (x := 0; x < width; x++) {
            b := 1.0 * x / width;
            c: uint32;
            if (y < height/2) {
                c = palette[x];
            } else {
                c = cheap_nonlinear_black(b);
            }
            pixels[y * width + x] = c;
        }
    }
    codecs.image_save_png({ 4, (:uint8*)&pixels[0], width, height }, "blacks.png");

    // Dump IPT data about the palette, for plotting:
    {
        I: float[];
        P: float[];
        T: float[];
        for (palette_index:=0; palette_index < std.alen(palette); palette_index++) {
            c := palette[palette_index];
            srgb: float[3] = { (c>>16)&0xff, (c>>8)&0xff, c&0xff };
            for (i:=0; i<3; i++) { srgb[i] *= 1.0/255.0; }
            ipt: float[3]; paltool.ipt_from_srgb(1, ipt, 3, srgb, 3);
            std.apush(I, ipt[0]);
            std.apush(P, ipt[1]); // P and T are both close to zero if we're fully desaturated
            std.apush(T, ipt[2]);
        }
        // @todo make multicolumn csv facility
        if (out := open_for_writing("blacksi.csv"); out) {
            print_float_array(out.libc_file, "i", I);
            std.dispose(out);
        }
        if (out := open_for_writing("blacksp.csv"); out) {
            print_float_array(out.libc_file, "p", P);
            std.dispose(out);
        }
        if (out := open_for_writing("blackst.csv"); out) {
            print_float_array(out.libc_file, "t", T);
            std.dispose(out);
        }
    }


    return 0;
}

func make_black_and_white_palette(num_colors: usize, palette: uint32*) {
    for (i:=0; i<num_colors; i++) {
        intensity := float(i) / num_colors;
        palette[i] = black(intensity);
    }
}

func black(x: float): uint32 {
    #assert(x >= 0.0 && x <= 1.0);
    ipt: float[3] = { x, 0.0, 0.0 };
    srgb: float[3];
    paltool.srgb_from_ipt(1, srgb, 3, ipt, 3);
    for (i:=0; i<3; i++) { srgb[i] *= 255.0; }

    box: float[6] = {
            libc.floor(srgb[0])/255.0, libc.ceil(srgb[0])/255.0,
            libc.floor(srgb[1])/255.0, libc.ceil(srgb[1])/255.0,
            libc.floor(srgb[2])/255.0, libc.ceil(srgb[2])/255.0,
    };

    srgb_cube: float[] = {
            box[0], box[2], box[4],
            box[1], box[2], box[4],
            box[0], box[3], box[4],
            box[1], box[3], box[4],
            box[0], box[2], box[5],
            box[1], box[2], box[5],
            box[0], box[2], box[5],
            box[1], box[3], box[5],
    };

    ipt_cube: float[8*3];
    paltool.ipt_from_srgb(8, ipt_cube, 3, srgb_cube, 3);

    closest_i_delta := 1.0;
    closest_i_index := -1;

    for (i:=0; i<8; i++) {
        delta := libc.fabs(ipt_cube[i*3] - x);
        if (delta < closest_i_delta) {
            closest_i_index = i;
            closest_i_delta = delta;
        }
    }

    qsrgb := &srgb_cube[closest_i_index*3];
    r: uint8 = qsrgb[0] * 255.0;
    g: uint8 = qsrgb[1] * 255.0;
    b: uint8 = qsrgb[2] * 255.0;
    return 0xff000000 | r<<16 | g<<8 | b;

    #assert(false);
}

func cheap_nonlinear_black(x: float): uint32 {
    y: uint8 = uint8(libc.round(255 * x)) & 0xff;
    return 0xff000000 | (y<<16) | (y<<8) | (y);
}

func open_for_writing(path: char const*): File* {
    libc_file := libc.fopen(path, "w");
    if (!libc_file) {
        return 0;
    }
    return new File{std.make_disposable(std.file_dispose), libc_file};
}

func print_float_array(dst: libc.FILE*, prefix: char const*, a: float[]) {
    libc.fprintf(dst, "%s\n", prefix);
    for (i:=0; i<std.alen(a); i++) { libc.fprintf(dst, "%f\n", a[i]); }
}
